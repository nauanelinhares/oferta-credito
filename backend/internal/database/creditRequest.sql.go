// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: creditRequest.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCreditRequest = `-- name: CreateCreditRequest :one

INSERT INTO creditRequest (id, person_id, start_amount, amount, status, reason, note, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, person_id, start_amount, amount, status, reason, note, created_at, updated_at
`

type CreateCreditRequestParams struct {
	ID          uuid.UUID
	PersonID    uuid.UUID
	StartAmount float64
	Amount      float64
	Status      string
	Reason      string
	Note        string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateCreditRequest(ctx context.Context, arg CreateCreditRequestParams) (Creditrequest, error) {
	row := q.db.QueryRowContext(ctx, createCreditRequest,
		arg.ID,
		arg.PersonID,
		arg.StartAmount,
		arg.Amount,
		arg.Status,
		arg.Reason,
		arg.Note,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Creditrequest
	err := row.Scan(
		&i.ID,
		&i.PersonID,
		&i.StartAmount,
		&i.Amount,
		&i.Status,
		&i.Reason,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCreditRequest = `-- name: DeleteCreditRequest :exec
DELETE FROM creditRequest WHERE id = $1
`

func (q *Queries) DeleteCreditRequest(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCreditRequest, id)
	return err
}

const getCreditRequest = `-- name: GetCreditRequest :one

SELECT id, person_id, start_amount, amount, status, reason, note, created_at, updated_at FROM creditRequest
WHERE id = $1
`

func (q *Queries) GetCreditRequest(ctx context.Context, id uuid.UUID) (Creditrequest, error) {
	row := q.db.QueryRowContext(ctx, getCreditRequest, id)
	var i Creditrequest
	err := row.Scan(
		&i.ID,
		&i.PersonID,
		&i.StartAmount,
		&i.Amount,
		&i.Status,
		&i.Reason,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCreditRequests = `-- name: GetCreditRequests :many
SELECT id, person_id, start_amount, amount, status, reason, note, created_at, updated_at FROM creditRequest
`

func (q *Queries) GetCreditRequests(ctx context.Context) ([]Creditrequest, error) {
	rows, err := q.db.QueryContext(ctx, getCreditRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Creditrequest
	for rows.Next() {
		var i Creditrequest
		if err := rows.Scan(
			&i.ID,
			&i.PersonID,
			&i.StartAmount,
			&i.Amount,
			&i.Status,
			&i.Reason,
			&i.Note,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCreditRequest = `-- name: UpdateCreditRequest :exec
UPDATE creditRequest
SET status = $2, updated_at = $3
WHERE id = $1
RETURNING id, person_id, start_amount, amount, status, reason, note, created_at, updated_at
`

type UpdateCreditRequestParams struct {
	ID        uuid.UUID
	Status    string
	UpdatedAt time.Time
}

func (q *Queries) UpdateCreditRequest(ctx context.Context, arg UpdateCreditRequestParams) error {
	_, err := q.db.ExecContext(ctx, updateCreditRequest, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}

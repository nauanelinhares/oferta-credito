// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: person.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPerson = `-- name: CreatePerson :one

INSERT INTO person (id, fname, lname, age, email, job, savings, due, created_at, updated_at) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, fname, lname, age, email, job, savings, due, created_at, updated_at
`

type CreatePersonParams struct {
	ID        uuid.UUID
	Fname     string
	Lname     string
	Age       int32
	Email     string
	Job       string
	Savings   float64
	Due       float64
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (Person, error) {
	row := q.db.QueryRowContext(ctx, createPerson,
		arg.ID,
		arg.Fname,
		arg.Lname,
		arg.Age,
		arg.Email,
		arg.Job,
		arg.Savings,
		arg.Due,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Age,
		&i.Email,
		&i.Job,
		&i.Savings,
		&i.Due,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePerson = `-- name: DeletePerson :exec
DELETE FROM person WHERE id = $1
`

func (q *Queries) DeletePerson(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePerson, id)
	return err
}

const getPerson = `-- name: GetPerson :one

SELECT id, fname, lname, age, email, job, savings, due, created_at, updated_at FROM person
WHERE id = $1
`

func (q *Queries) GetPerson(ctx context.Context, id uuid.UUID) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPerson, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Age,
		&i.Email,
		&i.Job,
		&i.Savings,
		&i.Due,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPersons = `-- name: GetPersons :many

SELECT id, fname, lname, age, email, job, savings, due, created_at, updated_at FROM person
`

func (q *Queries) GetPersons(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, getPersons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Fname,
			&i.Lname,
			&i.Age,
			&i.Email,
			&i.Job,
			&i.Savings,
			&i.Due,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDue = `-- name: UpdateDue :exec
UPDATE person
SET due = (
    SELECT SUM(amount)
    FROM creditRequest
    WHERE person_id = person.id
    GROUP BY person_id  
)
WHERE EXISTS (
    SELECT 1
    FROM creditRequest
    WHERE person_id = person.id
)
`

func (q *Queries) UpdateDue(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateDue)
	return err
}

const updatePerson = `-- name: UpdatePerson :exec
UPDATE person
SET savings = $2 and updated_at = $3
WHERE id = $1
RETURNING id, fname, lname, age, email, job, savings, due, created_at, updated_at
`

type UpdatePersonParams struct {
	ID        uuid.UUID
	Savings   float64
	UpdatedAt time.Time
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) error {
	_, err := q.db.ExecContext(ctx, updatePerson, arg.ID, arg.Savings, arg.UpdatedAt)
	return err
}
